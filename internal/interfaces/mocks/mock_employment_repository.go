// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/employment_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/erinchen11/hr-system/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockEmploymentRepository is a mock of EmploymentRepository interface.
type MockEmploymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmploymentRepositoryMockRecorder
}

// MockEmploymentRepositoryMockRecorder is the mock recorder for MockEmploymentRepository.
type MockEmploymentRepositoryMockRecorder struct {
	mock *MockEmploymentRepository
}

// NewMockEmploymentRepository creates a new mock instance.
func NewMockEmploymentRepository(ctrl *gomock.Controller) *MockEmploymentRepository {
	mock := &MockEmploymentRepository{ctrl: ctrl}
	mock.recorder = &MockEmploymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmploymentRepository) EXPECT() *MockEmploymentRepositoryMockRecorder {
	return m.recorder
}

// CreateEmployment mocks base method.
func (m *MockEmploymentRepository) CreateEmployment(ctx context.Context, employment *models.Employment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployment", ctx, employment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmployment indicates an expected call of CreateEmployment.
func (mr *MockEmploymentRepositoryMockRecorder) CreateEmployment(ctx, employment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployment", reflect.TypeOf((*MockEmploymentRepository)(nil).CreateEmployment), ctx, employment)
}

// GetEmploymentByAccountID mocks base method.
func (m *MockEmploymentRepository) GetEmploymentByAccountID(ctx context.Context, accountID uuid.UUID) (*models.Employment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmploymentByAccountID", ctx, accountID)
	ret0, _ := ret[0].(*models.Employment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmploymentByAccountID indicates an expected call of GetEmploymentByAccountID.
func (mr *MockEmploymentRepositoryMockRecorder) GetEmploymentByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmploymentByAccountID", reflect.TypeOf((*MockEmploymentRepository)(nil).GetEmploymentByAccountID), ctx, accountID)
}

// GetEmploymentByID mocks base method.
func (m *MockEmploymentRepository) GetEmploymentByID(ctx context.Context, id uuid.UUID) (*models.Employment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmploymentByID", ctx, id)
	ret0, _ := ret[0].(*models.Employment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmploymentByID indicates an expected call of GetEmploymentByID.
func (mr *MockEmploymentRepositoryMockRecorder) GetEmploymentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmploymentByID", reflect.TypeOf((*MockEmploymentRepository)(nil).GetEmploymentByID), ctx, id)
}

// GetEmploymentCountByJobGradeID mocks base method.
func (m *MockEmploymentRepository) GetEmploymentCountByJobGradeID(ctx context.Context, jobGradeID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmploymentCountByJobGradeID", ctx, jobGradeID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmploymentCountByJobGradeID indicates an expected call of GetEmploymentCountByJobGradeID.
func (mr *MockEmploymentRepositoryMockRecorder) GetEmploymentCountByJobGradeID(ctx, jobGradeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmploymentCountByJobGradeID", reflect.TypeOf((*MockEmploymentRepository)(nil).GetEmploymentCountByJobGradeID), ctx, jobGradeID)
}

// ListEmployments mocks base method.
func (m *MockEmploymentRepository) ListEmployments(ctx context.Context) ([]models.Employment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployments", ctx)
	ret0, _ := ret[0].([]models.Employment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployments indicates an expected call of ListEmployments.
func (mr *MockEmploymentRepositoryMockRecorder) ListEmployments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployments", reflect.TypeOf((*MockEmploymentRepository)(nil).ListEmployments), ctx)
}

// UpdateEmployment mocks base method.
func (m *MockEmploymentRepository) UpdateEmployment(ctx context.Context, employment *models.Employment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployment", ctx, employment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployment indicates an expected call of UpdateEmployment.
func (mr *MockEmploymentRepositoryMockRecorder) UpdateEmployment(ctx, employment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployment", reflect.TypeOf((*MockEmploymentRepository)(nil).UpdateEmployment), ctx, employment)
}
