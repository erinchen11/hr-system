// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/leave_request_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/erinchen11/hr-system/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLeaveRequestRepository is a mock of LeaveRequestRepository interface.
type MockLeaveRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLeaveRequestRepositoryMockRecorder
}

// MockLeaveRequestRepositoryMockRecorder is the mock recorder for MockLeaveRequestRepository.
type MockLeaveRequestRepositoryMockRecorder struct {
	mock *MockLeaveRequestRepository
}

// NewMockLeaveRequestRepository creates a new mock instance.
func NewMockLeaveRequestRepository(ctrl *gomock.Controller) *MockLeaveRequestRepository {
	mock := &MockLeaveRequestRepository{ctrl: ctrl}
	mock.recorder = &MockLeaveRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaveRequestRepository) EXPECT() *MockLeaveRequestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLeaveRequestRepository) Create(ctx context.Context, request *models.LeaveRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLeaveRequestRepositoryMockRecorder) Create(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLeaveRequestRepository)(nil).Create), ctx, request)
}

// GetByID mocks base method.
func (m *MockLeaveRequestRepository) GetByID(ctx context.Context, id uuid.UUID) (*models.LeaveRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.LeaveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLeaveRequestRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLeaveRequestRepository)(nil).GetByID), ctx, id)
}

// ListAllWithAccount mocks base method.
func (m *MockLeaveRequestRepository) ListAllWithAccount(ctx context.Context) ([]models.LeaveRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllWithAccount", ctx)
	ret0, _ := ret[0].([]models.LeaveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllWithAccount indicates an expected call of ListAllWithAccount.
func (mr *MockLeaveRequestRepositoryMockRecorder) ListAllWithAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllWithAccount", reflect.TypeOf((*MockLeaveRequestRepository)(nil).ListAllWithAccount), ctx)
}

// ListByAccountID mocks base method.
func (m *MockLeaveRequestRepository) ListByAccountID(ctx context.Context, accountID uuid.UUID) ([]models.LeaveRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccountID", ctx, accountID)
	ret0, _ := ret[0].([]models.LeaveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountID indicates an expected call of ListByAccountID.
func (mr *MockLeaveRequestRepositoryMockRecorder) ListByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountID", reflect.TypeOf((*MockLeaveRequestRepository)(nil).ListByAccountID), ctx, accountID)
}

// Update mocks base method.
func (m *MockLeaveRequestRepository) Update(ctx context.Context, request *models.LeaveRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLeaveRequestRepositoryMockRecorder) Update(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLeaveRequestRepository)(nil).Update), ctx, request)
}
