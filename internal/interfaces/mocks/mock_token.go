// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/token.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/erinchen11/hr-system/internal/models"
	jwt "github.com/golang-jwt/jwt/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockTokenGenerator is a mock of TokenGenerator interface.
type MockTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGeneratorMockRecorder
}

// MockTokenGeneratorMockRecorder is the mock recorder for MockTokenGenerator.
type MockTokenGeneratorMockRecorder struct {
	mock *MockTokenGenerator
}

// NewMockTokenGenerator creates a new mock instance.
func NewMockTokenGenerator(ctrl *gomock.Controller) *MockTokenGenerator {
	mock := &MockTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGenerator) EXPECT() *MockTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockTokenGenerator) GenerateJWT(userID, email string, role uint8) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", userID, email, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockTokenGeneratorMockRecorder) GenerateJWT(userID, email, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockTokenGenerator)(nil).GenerateJWT), userID, email, role)
}

// MockTokenParser is a mock of TokenParser interface.
type MockTokenParser struct {
	ctrl     *gomock.Controller
	recorder *MockTokenParserMockRecorder
}

// MockTokenParserMockRecorder is the mock recorder for MockTokenParser.
type MockTokenParserMockRecorder struct {
	mock *MockTokenParser
}

// NewMockTokenParser creates a new mock instance.
func NewMockTokenParser(ctrl *gomock.Controller) *MockTokenParser {
	mock := &MockTokenParser{ctrl: ctrl}
	mock.recorder = &MockTokenParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenParser) EXPECT() *MockTokenParserMockRecorder {
	return m.recorder
}

// ParseJWT mocks base method.
func (m *MockTokenParser) ParseJWT(tokenStr string, opts ...jwt.ParserOption) (*models.Claims, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{tokenStr}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ParseJWT", varargs...)
	ret0, _ := ret[0].(*models.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockTokenParserMockRecorder) ParseJWT(tokenStr interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{tokenStr}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockTokenParser)(nil).ParseJWT), varargs...)
}

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// GenerateAndCacheToken mocks base method.
func (m *MockTokenService) GenerateAndCacheToken(ctx context.Context, user *models.Account) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAndCacheToken", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAndCacheToken indicates an expected call of GenerateAndCacheToken.
func (mr *MockTokenServiceMockRecorder) GenerateAndCacheToken(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAndCacheToken", reflect.TypeOf((*MockTokenService)(nil).GenerateAndCacheToken), ctx, user)
}

// ValidateToken mocks base method.
func (m *MockTokenService) ValidateToken(ctx context.Context, tokenStr string) (*models.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, tokenStr)
	ret0, _ := ret[0].(*models.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenServiceMockRecorder) ValidateToken(ctx, tokenStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenService)(nil).ValidateToken), ctx, tokenStr)
}
