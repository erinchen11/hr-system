// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/employment_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/erinchen11/hr-system/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockEmploymentService is a mock of EmploymentService interface.
type MockEmploymentService struct {
	ctrl     *gomock.Controller
	recorder *MockEmploymentServiceMockRecorder
}

// MockEmploymentServiceMockRecorder is the mock recorder for MockEmploymentService.
type MockEmploymentServiceMockRecorder struct {
	mock *MockEmploymentService
}

// NewMockEmploymentService creates a new mock instance.
func NewMockEmploymentService(ctrl *gomock.Controller) *MockEmploymentService {
	mock := &MockEmploymentService{ctrl: ctrl}
	mock.recorder = &MockEmploymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmploymentService) EXPECT() *MockEmploymentServiceMockRecorder {
	return m.recorder
}

// GetEmploymentByAccountID mocks base method.
func (m *MockEmploymentService) GetEmploymentByAccountID(ctx context.Context, accountID uuid.UUID) (*models.Employment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmploymentByAccountID", ctx, accountID)
	ret0, _ := ret[0].(*models.Employment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmploymentByAccountID indicates an expected call of GetEmploymentByAccountID.
func (mr *MockEmploymentServiceMockRecorder) GetEmploymentByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmploymentByAccountID", reflect.TypeOf((*MockEmploymentService)(nil).GetEmploymentByAccountID), ctx, accountID)
}

// GetEmploymentByID mocks base method.
func (m *MockEmploymentService) GetEmploymentByID(ctx context.Context, employmentID uuid.UUID) (*models.Employment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmploymentByID", ctx, employmentID)
	ret0, _ := ret[0].(*models.Employment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmploymentByID indicates an expected call of GetEmploymentByID.
func (mr *MockEmploymentServiceMockRecorder) GetEmploymentByID(ctx, employmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmploymentByID", reflect.TypeOf((*MockEmploymentService)(nil).GetEmploymentByID), ctx, employmentID)
}

// ListEmployments mocks base method.
func (m *MockEmploymentService) ListEmployments(ctx context.Context) ([]models.Employment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployments", ctx)
	ret0, _ := ret[0].([]models.Employment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployments indicates an expected call of ListEmployments.
func (mr *MockEmploymentServiceMockRecorder) ListEmployments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployments", reflect.TypeOf((*MockEmploymentService)(nil).ListEmployments), ctx)
}

// TerminateEmployment mocks base method.
func (m *MockEmploymentService) TerminateEmployment(ctx context.Context, employmentID uuid.UUID, terminationDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateEmployment", ctx, employmentID, terminationDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateEmployment indicates an expected call of TerminateEmployment.
func (mr *MockEmploymentServiceMockRecorder) TerminateEmployment(ctx, employmentID, terminationDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateEmployment", reflect.TypeOf((*MockEmploymentService)(nil).TerminateEmployment), ctx, employmentID, terminationDate)
}

// UpdateEmploymentDetails mocks base method.
func (m *MockEmploymentService) UpdateEmploymentDetails(ctx context.Context, employmentID uuid.UUID, updates *models.Employment) (*models.Employment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmploymentDetails", ctx, employmentID, updates)
	ret0, _ := ret[0].(*models.Employment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmploymentDetails indicates an expected call of UpdateEmploymentDetails.
func (mr *MockEmploymentServiceMockRecorder) UpdateEmploymentDetails(ctx, employmentID, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmploymentDetails", reflect.TypeOf((*MockEmploymentService)(nil).UpdateEmploymentDetails), ctx, employmentID, updates)
}
