// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/leave_request_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/erinchen11/hr-system/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockLeaveRequestService is a mock of LeaveRequestService interface.
type MockLeaveRequestService struct {
	ctrl     *gomock.Controller
	recorder *MockLeaveRequestServiceMockRecorder
}

// MockLeaveRequestServiceMockRecorder is the mock recorder for MockLeaveRequestService.
type MockLeaveRequestServiceMockRecorder struct {
	mock *MockLeaveRequestService
}

// NewMockLeaveRequestService creates a new mock instance.
func NewMockLeaveRequestService(ctrl *gomock.Controller) *MockLeaveRequestService {
	mock := &MockLeaveRequestService{ctrl: ctrl}
	mock.recorder = &MockLeaveRequestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaveRequestService) EXPECT() *MockLeaveRequestServiceMockRecorder {
	return m.recorder
}

// ApplyForLeave mocks base method.
func (m *MockLeaveRequestService) ApplyForLeave(ctx context.Context, accountIDStr, leaveType, reason string, startDate, endDate time.Time) (*models.LeaveRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyForLeave", ctx, accountIDStr, leaveType, reason, startDate, endDate)
	ret0, _ := ret[0].(*models.LeaveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyForLeave indicates an expected call of ApplyForLeave.
func (mr *MockLeaveRequestServiceMockRecorder) ApplyForLeave(ctx, accountIDStr, leaveType, reason, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyForLeave", reflect.TypeOf((*MockLeaveRequestService)(nil).ApplyForLeave), ctx, accountIDStr, leaveType, reason, startDate, endDate)
}

// ApproveRequest mocks base method.
func (m *MockLeaveRequestService) ApproveRequest(ctx context.Context, leaveRequestIDStr, processorAccountIDStr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveRequest", ctx, leaveRequestIDStr, processorAccountIDStr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveRequest indicates an expected call of ApproveRequest.
func (mr *MockLeaveRequestServiceMockRecorder) ApproveRequest(ctx, leaveRequestIDStr, processorAccountIDStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveRequest", reflect.TypeOf((*MockLeaveRequestService)(nil).ApproveRequest), ctx, leaveRequestIDStr, processorAccountIDStr)
}

// GetLeaveRequestByID mocks base method.
func (m *MockLeaveRequestService) GetLeaveRequestByID(ctx context.Context, leaveRequestIDStr string) (*models.LeaveRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaveRequestByID", ctx, leaveRequestIDStr)
	ret0, _ := ret[0].(*models.LeaveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaveRequestByID indicates an expected call of GetLeaveRequestByID.
func (mr *MockLeaveRequestServiceMockRecorder) GetLeaveRequestByID(ctx, leaveRequestIDStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaveRequestByID", reflect.TypeOf((*MockLeaveRequestService)(nil).GetLeaveRequestByID), ctx, leaveRequestIDStr)
}

// ListAccountRequests mocks base method.
func (m *MockLeaveRequestService) ListAccountRequests(ctx context.Context, accountIDStr string) ([]models.LeaveRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountRequests", ctx, accountIDStr)
	ret0, _ := ret[0].([]models.LeaveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountRequests indicates an expected call of ListAccountRequests.
func (mr *MockLeaveRequestServiceMockRecorder) ListAccountRequests(ctx, accountIDStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountRequests", reflect.TypeOf((*MockLeaveRequestService)(nil).ListAccountRequests), ctx, accountIDStr)
}

// ListAllRequests mocks base method.
func (m *MockLeaveRequestService) ListAllRequests(ctx context.Context) ([]models.LeaveRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllRequests", ctx)
	ret0, _ := ret[0].([]models.LeaveRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRequests indicates an expected call of ListAllRequests.
func (mr *MockLeaveRequestServiceMockRecorder) ListAllRequests(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRequests", reflect.TypeOf((*MockLeaveRequestService)(nil).ListAllRequests), ctx)
}

// RejectRequest mocks base method.
func (m *MockLeaveRequestService) RejectRequest(ctx context.Context, leaveRequestIDStr, processorAccountIDStr, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectRequest", ctx, leaveRequestIDStr, processorAccountIDStr, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectRequest indicates an expected call of RejectRequest.
func (mr *MockLeaveRequestServiceMockRecorder) RejectRequest(ctx, leaveRequestIDStr, processorAccountIDStr, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectRequest", reflect.TypeOf((*MockLeaveRequestService)(nil).RejectRequest), ctx, leaveRequestIDStr, processorAccountIDStr, reason)
}
